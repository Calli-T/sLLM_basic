플래시어텐션2
{
    {   나오게된 배경
        아무튼 기존 어텐션보다 빠르긴 한데, 그래픽 카드를 최대로 긁어서 쓰진 못했다
        순전파에서 30~50%, 역전파에서 25~35%정도를 썼다고 한다. 그리고 이상적일 때는 80~90%까지 활용할 수 있다고 함(이론상값인듯)

        그래서 개선된 플래시어텐션2는 순전파에서 최대 GPU처리량의 73%, 역전파는 63% 정도를 쓸 수 있다고 한다.
    }

    {   개선점
        {   행렬 곱셈이 아닌 연산 줄이기
            GPU들이 행렬곱셈
            비행렬 곱셈을 최대한 효율적으로 수행하는 방식으로 속도를 향상
            (어떻게???)
            ※ 좀 찾아봤는데, 삼각형 마스킹에서 0곱을 안쓰거나, 효율적인 타일링, 메모리 정렬, 저장 연속성, 스레드의 작업 균등화...
            읽어봤는데 한 두개가 아니며, 심지어 하드웨어 종속적인게 상당히 많다
        }
        {   시퀀스 길이 방향의 병렬화 추가
            기존: 배치 크기x어텐션 헤드 수 만큼의 스레드 블록으로 병렬 처리
            개선: 시퀀스 길이 방향으로 병렬화 추가

            사전 지식
            Thread: GPU의 가장 작은 계산 단위, 한 스레드는 하나의 스트리밍 멀티프로세서(SM)에서만 실행된다
            Warp: 32 스레드를 하나의 명령으로 실행하는 단위(SIMT, single instruction multi-threads), GPU의 효율적인 연산을 위해 사용
            스레드 블록: 4~8개의 워프를 모은것, 한 SM에 배정
            ※ 한 SM에선 자원이 허락하는한 여러 블록을 실행하는 것은 가능함
            요약: 스레드 모아 워프, 워프 모아 스레드 블럭, 이 단위들은 한 SM 내부에서 실행됨

            GPU를 효율적으로 활용하려면 충분한 수의 스레드 블럭이 필요함
            배치 크기가 작거나 어텐션 헤드 수가 작은 경우, SM이 충분히 안돌아감

            예시
            32개의 어텐션 헤드가 있는 상황에서 배치 크기가 1~2인 경우 A100의 SM 108개를 꽉 채우지는 못함
            시퀀스 길이 방향으로 여러 개의 묶음으로 나눠 스레드 블록 수를 늘림

            요약: 배치 크기*어텐션 수 만큼의 스레드 블록 사용, 그러나 GPU의 SM을 꽉 채우지는 못해서, 시퀀스 방향으로 병렬처리 시켜서 꽉 채움
        }
    }
}

※ 플래시어텐션3은 FP8사용, 비동기 처리등을 사용하며, 아직 연구중임