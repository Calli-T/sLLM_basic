{   하이브리드 검색
    {   등장 이유와 의미
        키워드 검색: 동일한 키워드가 많이 포함될수록 유사도를 높게 평가하는 검색
        의미 검색: 의미가 유사할 수록 유사도를 높게 평가하는 검색

        키워드 검색은 의미가 유사하지만 동일한 키워드가 없으면 유사도가 낮음
        의미 검색은 키워드가 동일한 검색을 찾기가 어려움

        두 유사도를 절충한 방식이 하이브리드 검색
    }

    {   키워드 검색 방식: BM25
        TF-IDF와 유사한 방식으로 키워드 검색, 키워드 서치에서 강력한 알고리즘

        수식은 다음과 같다

        Score(Q, D) = Σ(i=1, n) IDF(q_i) * [f(q_i, D) * (k_1 + 1)] / [f(q_i, D) + k_i * (1 - b + b*|D|/avgdl)]
        IDF(q_i) = ln{(N - n(q_i) + 0.5)/(n(q_i) + 0.5) + 1}

        Score(Q, D): 전체 쿼리 Q에 대해 문서 D가 얼마나 관계있는가를 나타내는 지표
        n(q_i): 쿼리 단어의 토큰 q_i가 등장한 문서의 수
        N: 전체 문서의 수
        D: 문서
        |D|: 문서의 길이
        avgdl: 문서의 평균 길이
        ※ k_1과 b는 하이퍼파라미터

        수식의 왼쪽은 IDF, 특정 단어 q_i가 전체 문서에서 얼마나 자주 등장했는지를 나타냄
        수식의 오른쪽은 특정 문서 D에서 특정 단어 q_i가 얼마나 많이 등장했는지를 나타냄

        수식의 오른쪽에서 [f(q_i, D) * (k_1 + 1)] / [f(q_i, D)]를 A구간이라 할 때,
        해당 구간에서 k_1은 단어 빈도에 대한 포화 효과를 준다. ※ 포화효과란, 입력값이 일정 수준 이상 커지면 일정한 값에 수렴하거나 출력이 둔감해지는 현상
        f(q_i, D) 즉 어떤 토큰 하나가 문서에 아무리 많아도 해당 구간은 (K_1 + 1)에 가까워지기만 할 뿐, 무한정 커지지 않음
        [k_i * (1 - b + b*|D|/avgdl)]를 B구간이라 하자
        |D|/avgdl 부분은 문서 길이에 관한 가중치이다. 문서의 길이가 평균보다 짧으면 B구간이 작아지고,
        결과적으로 짧은 문서에서 토큰이 등장했을 때 중요도를 높인다. b는 문서 길이 효과의 크기를 반영하는 계수이다

        TF-IDF와는 포화효과, 문서 길이 효과 정도가 다르고
        특정 문서에서 토큰이 많이 나올 수록, 전체 문서에서 토큰이 나오는 문서의 개수가 적을수록 중요도가 높아지는것은 서로같다

        요약: BM25는 TF-IDF에서 포화효과와 문서 길이 효과를 고려해서 키워드 검색을 함
    }

    {   둘을 섞을 때의 주의 할 점과 해결방법
        통계 기반 점수와 임베딩 유사도 점수를 섞어서 검색하는 하이브리드 검색을 위해서는,
        두 점수를 하나로 합쳐야 하지만,
        점수의 분포가 서로 다르므로, 무지성 덧셈을 했다가는
        둘 중 하나를 더 크게 반영하게된다.

        이를 해결하기 위해서는 상호 순위 조합이란걸 쓰면된다
        두 검색의 순위를 이용해 점수를 산정하는 방식으로, 다음과 같다
        (1/(k+순위))를 두 개의 순위 모두에 적용하고 서로 더한 다음, 그 값이 클수록 높은 순위이다.
        ※ k는 조절가능한 인자이다.
    }
}

357p
실습

하이브리드 서치를 위해선
BM25를 하려면 미리 토큰화(와 불용어 제거, 표제어 추출 등등) 같은 전처리를 해둘 필요가 있다.
임베딩 검색을 하려면 미리 토큰화 -> 바이 인코딩 등의 전처리를 해둘 필요가 있다.
상호 순위 조합을 구현할 필요가 있다. (이건 간단하다)
Milvus는 둘 다 지원하고, 오픈 소스라고함 함(GPT 피셜)
